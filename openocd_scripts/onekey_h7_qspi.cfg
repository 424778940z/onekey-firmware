# stm32 helper functions
source [find stm32_helper.cfg]

proc SystemClock_Config_M7 {} {

	# /* Supply configuration update enable */
	# HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY); #PWR_DIRECT_SMPS_SUPPLY->0x00000004
	# -->MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
	#PWR_SUPPLY_CONFIG_MASK->(PWR_CR3_SMPSLEVEL | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)
	MODIFY_REG 0x5802480c [expr {(0x00000030 | 0x00000008 | 0x00000004 | 0x00000002 | 0x00000001)}] 0x00000004
	

	# # /* Configure the main internal regulator output voltage */
	# __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0); #PWR_REGULATOR_VOLTAGE_SCALE0->0
	# -->MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, (__REGULATOR__));
	# -->READ_BIT (PWR->D3CR, PWR_D3CR_VOS);
	MODIFY_REG 0x58024818 0x0000C000 0
	READ_BIT 0x58024818 0x0000C000

	# while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

	# /* Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure. */
	# RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;

	# RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
	#   -->__HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
	#     -->MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , 1)
	mmw 0x58024400 0x1 [expr {0x1 | 0x18}]

	# RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	#   -->__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
	#     -->MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, (uint32_t)(__HSICalibrationValue__) << RCC_HSICFGR_HSITRIM_Pos);
	# NOTE: HSICFGR is called ICSCR in cube ide, and it is not fixed yet
	mmw 0x58024404 0x40 0x7f000000

	# RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	# -->__HAL_RCC_PLL_DISABLE()
	#   -->CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON)
	CLEAR_BIT 0x58024400 0x1000000

	# RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI; #RCC_PLLSOURCE_HSI->0
	# RCC_OscInitStruct.PLL.PLLM = 4;
	# RCC_OscInitStruct.PLL.PLLN = 60;
	# RCC_OscInitStruct.PLL.PLLP = 2;
	# RCC_OscInitStruct.PLL.PLLQ = 2;
	# RCC_OscInitStruct.PLL.PLLR = 2;
	# -->__HAL_RCC_PLL_CONFIG(...);
	#   -->__HAL_RCC_PLL_CONFIG(__RCC_PLLSOURCE__, __PLLM1__, __PLLN1__, __PLLP1__, __PLLQ1__,__PLLR1__ );
	#     -->MODIFY_REG(RCC->PLLCKSELR, (0x00000003 | 0x000003F0) , ((0) | ( (__PLLM1__) <<4)));
	MODIFY_REG 0x58024428 [expr {(0x00000003 | 0x000003F0)}] [expr {((0) | ( (4) <<4))}]
	#     -->WRITE_REG(RCC->PLL1DIVR , ( (((60) - 1 )& 0x000001FF) | ((((2) -1 ) << 9) & 0x0000FE00) | ((((2) -1) << 16)& 0x007F0000) | ((((2) - 1) << 24)& 0x7F000000)));
	WRITE_REG 0x58024430 [expr {( (((60) - 1 )& 0x000001FF) | ((((2) -1 ) << 9) & 0x0000FE00) | ((((2) -1) << 16)& 0x007F0000) | ((((2) - 1) << 24)& 0x7F000000))}]

	# RCC_OscInitStruct.PLL.PLLFRACN = 0;
	# -->__HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
	#   -->MODIFY_REG(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1, (uint32_t)(__RCC_PLL1FRACN__) << RCC_PLL1FRACR_FRACN1_Pos)
	MODIFY_REG 0x58024434 0x0000FFF8 [expr {0<<3}]

	# RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3; # RCC_PLL1VCIRANGE_3->0xc
	# -->__HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
	#   -->MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, (__RCC_PLL1VCIRange__))
	MODIFY_REG 0x5802442c 0x0000000C 0xc

	# RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE; #RCC_PLL1VCOWIDE->0
	# -->__HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL); #PLLVCOSEL->0
	#   -->MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, (__RCC_PLL1VCORange__))
	MODIFY_REG 0x5802442c 0x00000002 0

	# /* Enable PLL System Clock output. */
	# __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
	# -->SET_BIT(RCC->PLLCFGR, (__RCC_PLL1ClockOut__))
	SET_BIT 0x5802442c 0x00010000

	# /* Enable PLL1Q Clock output. */
	# __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
	# -->SET_BIT(RCC->PLLCFGR, (__RCC_PLL1ClockOut__))
	SET_BIT 0x5802442c 0x00020000

	# /* Enable PLL1R  Clock output. */
	# __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
	# -->SET_BIT(RCC->PLLCFGR, (__RCC_PLL1ClockOut__))
	SET_BIT 0x5802442c 0x00040000

	# /* Enable PLL1FRACN . */
	# __HAL_RCC_PLLFRACN_ENABLE();
	# -->SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN)
	SET_BIT 0x5802442c 0x00000001

	# /* Enable the main PLL. */
	# __HAL_RCC_PLL_ENABLE();
	# -->SET_BIT(RCC->CR, RCC_CR_PLL1ON)
	SET_BIT 0x58024400 0x01000000

	# =====================================================

	# /* Initializes the CPU, AHB and APB buses clocks */
	# RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
	#                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
	#                             |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;

	# -->MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(__LATENCY__)) #FLatency->4
	MODIFY_REG 0x52002000 0x0000000F 0x00000004

	# RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
	# -->MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
	MODIFY_REG 0x58024418 0x00000070 0x40

	# RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
	# -->MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
	MODIFY_REG 0x5802441c 0x00000070 0x40

	# RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
	# -->MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
	MODIFY_REG 0x5802441c 0x00000700 0x400

	# RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
	# -->MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
	MODIFY_REG 0x58024420 0x00000070 0x40

	# RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
	# -->MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
	MODIFY_REG 0x58024418 0x0000000F 0x8

	# RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
	# -->MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
	MODIFY_REG 0x58024418 0x00000F00 0

	# RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	# -->MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
	MODIFY_REG 0x58024410 0x00000007 0x3


	# HAL_MspInit();
	# -->__HAL_RCC_SYSCFG_CLK_ENABLE();
	SET_BIT 0x580244f4 0x00000002
	READ_BIT 0x580244f4 0x00000002
}

# QSPI init functions
proc QSPI_MspInit {} {
	# PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
	# HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)
	# -->__HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
	#   -->MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_QSPISEL, (uint32_t)(__QSPICLKSource__))
	MODIFY_REG 0x5802444c 0x00000030 0x00000000

	# --- ENABLE CLOCK GPIO
	
	# __HAL_RCC_GPIOF_CLK_ENABLE();
	# -->SET_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOFEN);
	SET_BIT 0x580244e0 0x00000020

	# __HAL_RCC_GPIOG_CLK_ENABLE();
	# -->SET_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOGEN);
	SET_BIT 0x580244e0 0x00000040


	# --- ENABLE CLOCK QSPI

	# __HAL_RCC_QSPI_CLK_ENABLE();
	# -->SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_QSPIEN);
	SET_BIT 0x580244d4 0x00004000

	sleep 1									;# Wait for clock startup

	# PG06:AF10:H: BK1_NCS
	# PF10:AF09:V: CLK

	# PF06:AF09:V: BK1_IO3
	# PF07:AF09:V: BK1_IO2
	# PF09:AF10:V: BK1_IO1
	# PF08:AF10:V: BK1_IO0
	
	# /**QUADSPI GPIO Configuration
	# PG6     ------> QUADSPI_BK1_NCS
	# PF6     ------> QUADSPI_BK1_IO3
	# PF7     ------> QUADSPI_BK1_IO2
	# PF8     ------> QUADSPI_BK1_IO0
	# PF10     ------> QUADSPI_CLK
	# PF9     ------> QUADSPI_BK1_IO1
	# */

	# GPIOG_BASE 0x58021800
	# GPIOF_BASE 0x58021400

	# GPIO_Init {	REG_GPIO_BASE	PIN_INDEX	MODE	PULL	SPEED	AF	}

		# PORT G
	  # PG06:AF10:H: BK1_NCS
	  GPIO_Init  	0x58021800		6			2		0		2		10

		# PORT F
	  # PF10:AF09:V: CLK
	  GPIO_Init  	0x58021400		10			2		0		3		9
	  # PF06:AF09:V: BK1_IO3
	  GPIO_Init  	0x58021400		6			2		0		3		9
	  # PF07:AF09:V: BK1_IO2
	  GPIO_Init  	0x58021400		7			2		0		3		9
	  # PF09:AF10:V: BK1_IO1
	  GPIO_Init  	0x58021400		9			2		0		3		10
	  # PF08:AF10:V: BK1_IO0
	  GPIO_Init  	0x58021400		8			2		0		3		10


	# # Port F: PF10:AF09:V, PF09:AF10:V, PF08:AF10:V, PF07:AF09:V, PF06:AF09:V
	# mww 0x58021400 0xFFEAAFFF	;# MODER
	# mww 0x58021408 0x003FF000	;# OSPEEDR
	# mww 0x58021420 0x99000000	;# AFRL
	# mww 0x58021424 0x000009AA	;# AFRH
	# # Port G: PG06:AF10:H
	# mww 0x58021800 0xFFFFEFFF	;# MODER
	# mww 0x58021808 0x00002000	;# OSPEEDR
	# mww 0x58021820 0x0A000000	;# AFRL
}

proc QUADSPI_Init {} {

	QSPI_MspInit ;# enable clock and configure GPIO
	sleep 1 ;# Wait for clock startup

	# flash bank 1 QSPI gd25q64c
	WRITE_REG 0x52005000 0x05400018			;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=0, SSHIFT=1, TCEN=1
	WRITE_REG 0x52005004 0x00160100			;# QUADSPI_DCR: FSIZE=0x16, CSHT=0x01, CKMODE=0

	# software contorl mode
	# WRITE_REG 0x52005014 0x01002500				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x1, DCYC=0x0, ADSIZE=0x2, ADMODE=0x1, IMODE=0x1
	# memory map mode
	WRITE_REG 0x52005014 0x0D002500				;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x2, ADMODE=0x1, IMODE=0x1, INSTR=READ

	SET_BIT 0x52005000 0x00000001 ;# QUADSPI_CR: EN=1
}

# old method as backup
proc qspi_init { } {

	mmw 0x580244E0 0x000007FF 0				;# RCC_AHB4ENR |= GPIOA-GPIOK (enable clocks)
	mmw 0x580244D4 0x00004000 0				;# RCC_AHB3ENR |= QSPIEN (enable clock)
	sleep 1									;# Wait for clock startup

	# Port F: PF10:AF09:V, PF09:AF10:V, PF08:AF10:V, PF07:AF09:V, PF06:AF09:V
	mww 0x58021400 0xFFEAAFFF	;# MODER
	mww 0x58021408 0x003FF000	;# OSPEEDR
	mww 0x58021420 0x99000000	;# AFRL
	mww 0x58021424 0x000009AA	;# AFRH
	# Port G: PG06:AF10:H
	mww 0x58021800 0xFFFFEFFF	;# MODER
	mww 0x58021808 0x00002000	;# OSPEEDR
	mww 0x58021820 0x0A000000	;# AFRL

	# flash bank 1 QSPI gd25q64c
	mww 0x52005000 0x05400018			;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=0, SSHIFT=1, TCEN=1
	mww 0x52005004 0x00160100			;# QUADSPI_DCR: FSIZE=0x16, CSHT=0x01, CKMODE=0

	# software contorl mode
	# mww 0x52005014 0x01002500				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x1, DCYC=0x0, ADSIZE=0x2, ADMODE=0x1, IMODE=0x1
	# memory map mode
	mww 0x52005014 0x0D002500				;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x2, ADMODE=0x1, IMODE=0x1, INSTR=READ

	mmw 0x52005000 0x00000001 0				;# QUADSPI_CR: EN=1
}