
# ST macro re-implements
proc MODIFY_REG {REG CLEARMASK SETMASK} {
	# puts [format "MODIFY_REG 0x%x 0x%x 0x%x" $REG $CLEARMASK $SETMASK]
	mmw $REG $SETMASK $CLEARMASK
}
proc WRITE_REG {REG VAL} {
	# puts [format "WRITE_REG 0x%x 0x%x" $REG $VAL]
	mww $REG $VAL
}
proc READ_REG {REG} {
	set reg_val [mrw $REG]
	return $reg_val
}
proc CLEAR_BIT {reg bit_mak} {
	set old [mrw $reg]
	set new [expr {$old & ~$bit_mak}]
	mww $reg $new
}
proc SET_BIT {reg bit_mak} {
	set old [mrw $reg]
	set new [expr {$old | $bit_mak}]
	mww $reg $new
}
proc READ_BIT {reg bit_mak} {
	set reg_val [mrw $reg]
	if {[expr {$reg_val & $bit_mak}] == $bit_mak} {
		return 1
	} else {
		return 0
	} 
}

# fake HAL functions
proc GPIO_Init {REG_GPIO_BASE PIN_INDEX MODE PULL SPEED AF} {
	
	set reg_moder [expr {$REG_GPIO_BASE + 0x00}]
	set mask_moder 0x03 ;#00000011
	MODIFY_REG $reg_moder [expr {($mask_moder)<<($PIN_INDEX*2)}] [expr {($MODE)<<($PIN_INDEX*2)}]

	set reg_pupdr [expr {$REG_GPIO_BASE + 0x0c}]
	set mask_pupdr 0x03 ;#00000011
	MODIFY_REG $reg_pupdr [expr {($mask_pupdr)<<($PIN_INDEX*2)}] [expr {($PULL)<<($PIN_INDEX*2)}]

	set reg_ospeedr [expr {$REG_GPIO_BASE + 0x08}]
	set mask_ospeedr 0x03 ;#00000011
	MODIFY_REG $reg_ospeedr [expr {($mask_ospeedr)<<($PIN_INDEX*2)}] [expr {($SPEED)<<($PIN_INDEX*2)}]

	set reg_afrl [expr {$REG_GPIO_BASE + 0x20}]
	set reg_afrh [expr {$REG_GPIO_BASE + 0x24}]
	set mask_afr 0xf ;#00001111
	if {$PIN_INDEX <= 7} {
		MODIFY_REG $reg_afrl [expr {($mask_afr)<<($PIN_INDEX*4)}] [expr {($AF)<<($PIN_INDEX*4)}]
	} else {
		MODIFY_REG $reg_afrh [expr {($mask_afr)<<(($PIN_INDEX-8)*4)}] [expr {($AF)<<(($PIN_INDEX-8)*4)}]
	}
}

proc GPIO_PrintREG {REG_GPIO_BASE} {

	puts [format "============= GPIO_PrintREG (0x%x) =============" $REG_GPIO_BASE]

	set reg_moder [expr {$REG_GPIO_BASE + 0x00}]
	puts [format "GPIO_MODER = 0x%x" [READ_REG $reg_moder]]

	set reg_pupdr [expr {$REG_GPIO_BASE + 0x0c}]
	puts [format "GPIO_PUPDR = 0x%x" [READ_REG $reg_pupdr]]

	set reg_ospeedr [expr {$REG_GPIO_BASE + 0x08}]
	puts [format "GPIO_OSPEEDR = 0x%x" [READ_REG $reg_ospeedr]]

	set reg_afrl [expr {$REG_GPIO_BASE + 0x20}]
	puts [format "GPIO_AFRL = 0x%x" [READ_REG $reg_afrl]]

	set reg_afrh [expr {$REG_GPIO_BASE + 0x24}]
	puts [format "GPIO_AFRH = 0x%x" [READ_REG $reg_afrh]]
}

proc GPIO_Test {REG_GPIO_BASE PIN_INDEX} {
	GPIO_Init $REG_GPIO_BASE $PIN_INDEX 1 1 1 0
	WRITE_REG [expr {$REG_GPIO_BASE+0x14}] [expr {1<<$PIN_INDEX}]
}